#!/bin/bash
# FPKernel-BUILD menu based on afaneh menu

# KernelSU 
curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.3

# Variables
DIR=`readlink -f .`
OUT_DIR=$DIR/out
PARENT_DIR=`readlink -f ${DIR}/..`

export PLATFORM_VERSION=11
export ANDROID_MAJOR_VERSION=r
export CROSS_COMPILE=$PARENT_DIR/aarch64-linux-android-4.9/bin/aarch64-linux-android-
export CLANG_TRIPLE=$PARENT_DIR/clang-r416183b/bin/aarch64-linux-gnu-
export ARCH=arm64
export SEC_BUILD_CONF_VENDOR_BUILD_OS=13
export LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN=$PARENT_DIR/aarch64-linux-android-4.9/bin
export CLANG_PREBUILT_BIN=$PARENT_DIR/clang-r416183b/bin
export PATH=$PATH:$LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN:$CLANG_PREBUILT_BIN
export LLVM=1
KERNEL_MAKE_ENV="LOCALVERSION="

# New paths
PACKING_DIR="$DIR/vboot"
TMP_DIR="$PACKING_DIR/tmp"
MOD_OUTDIR="$PACKING_DIR/modules_out"
DTB_IMAGE="$TMP_DIR/dtb.img"
RAMDISK_TEMPLATE="$PACKING_DIR/vboot_ramdisk"
TMP_RAMDISK="$TMP_DIR/tmp_ramdisk"
TMP_MOD="$TMP_RAMDISK/lib/modules"
VBOOT_FILE="$TMP_DIR/vendor_boot.img"
DTB_FILE="arch/arm64/boot/dts/exynos/exynos2100.dtb"
# Tools
MKBOOTIMG="$PACKING_DIR/tools/mkbootimg.py"
MKDTBOIMG="$PACKING_DIR/tools/mkdtboimg.py"


# Color
ON_BLUE=`echo -e "\033[44m"`	# On Blue
BRED=`echo -e "\033[1;31m"`	# Bold Red
BBLUE=`echo -e "\033[1;34m"`	# Bold Blue
BGREEN=`echo -e "\033[1;32m"`	# Bold Green
UNDER_LINE=`echo -e "\e[4m"`	# Text Under Line
STD=`echo -e "\033[0m"`		# Text Clear
 
# Functions

toolchain(){
  if [ ! -d $PARENT_DIR/aarch64-linux-android-4.9 ]; then

    git clone --branch android-9.0.0_r59 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 $PARENT_DIR/aarch64-linux-android-4.9
    . $DIR/build_menu
  fi
}

clang(){
  if [ ! -d $PARENT_DIR/clang-r416183b ]; then
    git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b $PARENT_DIR/clang-r416183b
    . $DIR/build_menu
  fi
}

clean(){
  echo "${BGREEN}***** Cleaning in Progress *****${STD}"
  make clean
  make mrproper
  [ -d "$OUT_DIR" ] && rm -rf $OUT_DIR
  echo "${BGREEN}***** Cleaning Done *****${STD}"
}

build_kernel(){

  echo "${BGREEN}***** Compiling kernel *****${STD}"
  [ ! -d "$OUT_DIR" ] && mkdir $OUT_DIR
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV fpkernel_exynos2100-r9sxxx_defconfig
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV

  [ -e $DIR/arch/arm64/boot/Image.gz ] && cp $DIR/arch/arm64/boot/Image.gz $OUT_DIR/Image.gz
  if [ -e $DIR/arch/arm64/boot/Image ]; then
    cp $DIR/arch/arm64/boot/Image $OUT_DIR/Image

    echo "${BGREEN}***** Ready to Roar *****${STD}"
  fi
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV INSTALL_MOD_STRIP="--strip-debug --keep-section=.ARM.attributes" INSTALL_MOD_PATH="$MOD_OUTDIR" modules_install
}

post_build() {
  ## Post build setup
  rm -rf $TMP_DIR $VBOOT_FILE $TMP_RAMDISK
  mkdir -p $TMP_DIR $TMP_MOD/0.0 $TMP_RAMDISK

  cp -r $RAMDISK_TEMPLATE/* $TMP_RAMDISK/

  # Handle compiled modules
  if ! find "$MOD_OUTDIR/lib/modules" -mindepth 1 -type d | read; then
      echo -e "\nERROR: Unknown error!\n"
      exit 1
  fi

  missing_modules=""

  # Check and copy compiled modules
  for module in $(cat "$RAMDISK_TEMPLATE/lib/modules/modules.load"); do
      if i=$(find "$MOD_OUTDIR/lib/modules" -name "$module"); [ -f "$i" ]; then
          cp -f "$i" "$TMP_MOD/0.0/$module"
      else
          missing_modules="$missing_modules $module"
      fi
  done

  if [ -n "$missing_modules" ]; then
      echo "ERROR: the following modules were not found: $missing_modules"
      exit 1
  fi

  # Prepare ramdisk
  depmod 0.0 -b $TMP_RAMDISK
  sed -i 's|\([^ ]\+\)|/lib/modules/\1|g' "$TMP_MOD/0.0/modules.dep"
  find "$TMP_MOD/0.0" -name "modules.*" ! -name "modules.dep" ! -name "modules.softdep" ! -name "modules.alias" -exec rm -f {} +
  cp -f "$RAMDISK_TEMPLATE/lib/modules/modules.load" "$TMP_MOD/0.0/modules.load"
  mv "$TMP_MOD/0.0/"* "$TMP_MOD/"
  rmdir "$TMP_MOD/0.0"

  # Build the images
  echo -e "\nINFO: Building dtb image..."
  python $MKDTBOIMG create $DTB_IMAGE --custom0=0x00000000 --custom1=0xff000000 --version=0 --page_size=2048 $DTB_FILE || exit 1

  echo -e "\nINFO: Building vendor_boot image..."
  cd $TMP_RAMDISK
  find . -print | cpio --quiet -o -H newc -R root:root | gzip > $TMP_DIR/ramdisk.gz
  cd $TMP_DIR
  echo "androidboot.hardware=exynos2100 androidboot.selinux=permissive loop.max_part=7" > bootconfig

  $MKBOOTIMG --header_version 3 \
      --vendor_boot "$VBOOT_FILE" \
	  --vendor_bootconfig "$TMP_DIR/bootconfig" \
      --dtb "$DTB_IMAGE" \
      --vendor_ramdisk "$TMP_DIR/ramdisk.gz" \
      --os_version 11.0.0 \
      --os_patch_level 2024-08 \
	  --board "SRPUG16A010KU" || exit 1

  cd "$DIR"
  echo -e "INFO: Done!"
}

anykernel3(){
  if [ ! -d $PARENT_DIR/AnyKernel3 ]; then
    git clone https://github.com/osm0sis/AnyKernel3 $PARENT_DIR/AnyKernel3
  fi

  if [ -e $DIR/arch/arm64/boot/Image ]; then
    cd $PARENT_DIR/AnyKernel3
    cp $DIR/arch/arm64/boot/Image zImage
    sed -i "s/ExampleKernel by osm0sis/r9s Proton+ Kernel/g" anykernel.sh
    sed -i "s/=maguro/=r9s/g" anykernel.sh
    sed -i "s/=toroplus/=/g" anykernel.sh
    sed -i "s/=toro/=/g" anykernel.sh
    sed -i "s/=tuna/=/g" anykernel.sh
    sed -i "s/platform\/omap\/omap_hsmmc\.0\/by-name\/boot/bootdevice\/by-name\/boot/g" anykernel.sh
    sed -i "s/backup_file/#backup_file/g" anykernel.sh
    sed -i "s/replace_string/#replace_string/g" anykernel.sh
    sed -i "s/insert_line/#insert_line/g" anykernel.sh
    sed -i "s/append_file/#append_file/g" anykernel.sh
    sed -i "s/patch_fstab/#patch_fstab/g" anykernel.sh
    sed -i "s/dump_boot/split_boot/g" anykernel.sh
    sed -i "s/write_boot/flash_boot/g" anykernel.sh
    zip -r9 $PARENT_DIR/r9s_Proton_`cat $DIR/include/config/kernel.release`_`date '+%Y_%m_%d'`.zip * -x .git README.md *placeholder
    cd $DIR
  fi
}

# Run once
toolchain
clang

build_kernel
post_build
anykernel3
